// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiserlyMiser.Models.DataContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MiserlyMiser.Migrations
{
    [DbContext(typeof(MiserlyMiserDataContext))]
    [Migration("20220516054137__transactionTypeIsEnum")]
    partial class _transactionTypeIsEnum
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetCash", b =>
                {
                    b.Property<int>("BudgetsId")
                        .HasColumnType("integer");

                    b.Property<int>("CashesId")
                        .HasColumnType("integer");

                    b.HasKey("BudgetsId", "CashesId");

                    b.HasIndex("CashesId");

                    b.ToTable("BudgetCash");
                });

            modelBuilder.Entity("BudgetCategory", b =>
                {
                    b.Property<int>("BudgetsId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.HasKey("BudgetsId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BudgetCategory");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Money")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Cash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Money")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CashTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Cashs");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.CashType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CashTypes");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryCharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCharacterId");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.CategoryCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoryCharacters");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.FinancialGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CurrentMoneyAmount")
                        .HasColumnType("money");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PerioadId")
                        .HasColumnType("integer");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TargetMoneyAmount")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("FinancialGoals");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CashId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Money")
                        .HasColumnType("money");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CashId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("TransactionStatusId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("BudgetCash", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.Cash", null)
                        .WithMany()
                        .HasForeignKey("CashesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetCategory", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Budget", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.Period", "Period")
                        .WithMany("Budgets")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Cash", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.CashType", "CashType")
                        .WithMany("Cashes")
                        .HasForeignKey("CashTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.Currency", "Currency")
                        .WithMany("Cashes")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Category", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.CategoryCharacter", "CategoryCharacter")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.Category", "Parent")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("CategoryCharacter");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.FinancialGoal", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.Period", "Period")
                        .WithMany("FinancialGoals")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Transaction", b =>
                {
                    b.HasOne("MiserlyMiser.Models.Entities.Cash", "Cash")
                        .WithMany("Transactions")
                        .HasForeignKey("CashId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.PaymentType", "PaymentType")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiserlyMiser.Models.Entities.TransactionStatus", "TransactionStatus")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cash");

                    b.Navigation("Category");

                    b.Navigation("PaymentType");

                    b.Navigation("TransactionStatus");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Cash", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.CashType", b =>
                {
                    b.Navigation("Cashes");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.CategoryCharacter", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Currency", b =>
                {
                    b.Navigation("Cashes");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.PaymentType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.Period", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("FinancialGoals");
                });

            modelBuilder.Entity("MiserlyMiser.Models.Entities.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
